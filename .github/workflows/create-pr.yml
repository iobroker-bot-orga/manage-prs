name: createPR

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'URL of the GitHub repository'
        required: true
        type: string
      template:
        description: 'Name of the template'
        required: true
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Log workflow parameters
        run: |
          echo "==================================================================="
          echo "Workflow Parameters:"
          echo "==================================================================="
          echo "Repository URL: ${{ inputs.repository_url }}"
          echo "Template: ${{ inputs.template }}"
          echo "==================================================================="

      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Validate template files
        run: |
          echo ">>> Starting: Validate template files"
          TEMPLATE_NAME="${{ inputs.template }}"
          echo "    Checking for template: $TEMPLATE_NAME"
          
          # Check if templates directory exists
          if [ ! -d "./templates" ]; then
            echo "    ERROR: templates directory does not exist"
            exit 1
          fi
          
          # Check for required template files
          MISSING_FILES=""
          
          # Check for .md file
          if [ ! -f "./templates/${TEMPLATE_NAME}.md" ]; then
            echo "    ERROR: ./templates/${TEMPLATE_NAME}.md does not exist"
            MISSING_FILES="${MISSING_FILES} ${TEMPLATE_NAME}.md"
          else
            echo "    ✓ Found ./templates/${TEMPLATE_NAME}.md"
          fi
          
          # Check for .js file
          if [ ! -f "./templates/${TEMPLATE_NAME}.js" ]; then
            echo "    ERROR: ./templates/${TEMPLATE_NAME}.js does not exist"
            MISSING_FILES="${MISSING_FILES} ${TEMPLATE_NAME}.js"
          else
            echo "    ✓ Found ./templates/${TEMPLATE_NAME}.js"
          fi
          
          # Exit if any files are missing
          if [ -n "$MISSING_FILES" ]; then
            echo "    ERROR: Missing required template files:$MISSING_FILES"
            exit 1
          fi
          
          echo "    All required template files exist"
          echo ">>> Completed: Validate template files"

      - name: Extract repository info
        id: repo_info
        run: |
          # Extract owner and repo name from URL
          REPO_URL="${{ inputs.repository_url }}"
          # Remove trailing .git if present
          REPO_URL="${REPO_URL%.git}"
          # Extract owner/repo from URL (handles both https and git@ formats)
          if [[ $REPO_URL =~ github.com[:/]([^/]+)/([^/]+)$ ]]; then
            OWNER="${BASH_REMATCH[1]}"
            REPO="${BASH_REMATCH[2]}"
            echo "owner=$OWNER" >> $GITHUB_OUTPUT
            echo "repo=$REPO" >> $GITHUB_OUTPUT
            echo "full_name=$OWNER/$REPO" >> $GITHUB_OUTPUT
            echo ">>> Extracted repository info:"
            echo "    Owner: $OWNER"
            echo "    Repo: $REPO"
            echo "    Full name: $OWNER/$REPO"
          else
            echo "Error: Could not parse repository URL"
            exit 1
          fi

      - name: Fork repository
        env:
          GH_TOKEN: ${{ secrets.IOBBOT_GITHUB_TOKEN }}
        run: |
          echo ">>> Starting: Fork repository"
          # Get the authenticated user
          CURRENT_USER=$(gh api user -q .login)
          echo "    Current user: $CURRENT_USER"

          # Check if fork already exists
          echo "    Checking if fork exists at $CURRENT_USER/${{ steps.repo_info.outputs.repo }}"
          if gh repo view "$CURRENT_USER/${{ steps.repo_info.outputs.repo }}" >/dev/null 2>&1; then
            echo "    Fork already exists"

            # Verify that the fork is based on the target repository
            echo "    Verifying fork parent..."
            FORK_PARENT=$(gh repo view "$CURRENT_USER/${{ steps.repo_info.outputs.repo }}" --json parent -q 'if .parent then "\(.parent.owner.login)/\(.parent.name)" else "" end')
            if [ -z "$FORK_PARENT" ]; then
              echo "    ERROR: Repository exists but is not a fork"
              echo "    Repository: $CURRENT_USER/${{ steps.repo_info.outputs.repo }}"
              exit 1
            fi
            if [ "$FORK_PARENT" != "${{ steps.repo_info.outputs.full_name }}" ]; then
              echo "    ERROR: Fork exists but is not based on ${{ steps.repo_info.outputs.full_name }}"
              echo "    Fork parent: $FORK_PARENT"
              echo "    Expected: ${{ steps.repo_info.outputs.full_name }}"
              exit 1
            fi
            echo "    Fork parent verified: $FORK_PARENT"

            # Sync fork with upstream
            echo "    Syncing fork with upstream repository..."
            gh repo sync "$CURRENT_USER/${{ steps.repo_info.outputs.repo }}" --source "${{ steps.repo_info.outputs.full_name }}" || echo "    Fork sync completed or already up to date"
            echo "    Fork is up to date with upstream"
          else
            # Fork the repository
            echo "    Creating new fork..."
            gh repo fork ${{ steps.repo_info.outputs.full_name }} --clone=false || echo "    Fork creation may have encountered an issue"
            echo "    Fork created successfully"
          fi
          echo ">>> Completed: Fork repository"

      - name: Clone target repository
        env:
          GH_TOKEN: ${{ secrets.IOBBOT_GITHUB_TOKEN }}
        run: |
          echo ">>> Starting: Clone target repository"
          # Get the authenticated user for fork remote
          CURRENT_USER=$(gh api user -q .login)
          echo "    Current user: $CURRENT_USER"

          # Clone the repository
          echo "    Cloning from: https://github.com/${{ steps.repo_info.outputs.full_name }}.git"
          git clone https://github.com/${{ steps.repo_info.outputs.full_name }}.git target-repo
          cd target-repo
          echo "    Configuring git user..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add fork as a remote with authentication
          echo "    Adding fork remote..."
          git remote add fork https://x-access-token:${GH_TOKEN}@github.com/${CURRENT_USER}/${{ steps.repo_info.outputs.repo }}.git
          echo "    Fork remote added: ${CURRENT_USER}/${{ steps.repo_info.outputs.repo }}"

          echo "    Current directory: $(pwd)"
          echo "    Git remotes:"
          git remote -v
          echo "    Git status:"
          git status
          echo ">>> Completed: Clone target repository"

      - name: Create branch
        run: |
          echo ">>> Starting: Create branch"
          cd target-repo
          
          # Detect the default branch
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
          echo "    Detected default branch: $DEFAULT_BRANCH"
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_ENV
          
          BRANCH_NAME="update-from-template-${{ inputs.template }}-$(date +%s)"
          echo "    Creating branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          echo "==================================================================="
          echo "Default Branch: $DEFAULT_BRANCH"
          echo "Branch Name: $BRANCH_NAME"
          echo "==================================================================="
          echo ">>> Completed: Create branch"

      - name: Run createPR.js script
        run: |
          echo ">>> Starting: Run createPR.js script"
          cd target-repo
          echo "    Executing: node ../createPR.js \"${{ steps.repo_info.outputs.full_name }}\" \"${{ inputs.template }}\""
          node ../createPR.js "${{ steps.repo_info.outputs.full_name }}" "${{ inputs.template }}"
          echo ">>> Completed: Run createPR.js script"

      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.IOBBOT_GITHUB_TOKEN }}
        run: |
          echo ">>> Starting: Commit and push changes"
          cd target-repo
          echo "    Staging all changes..."
          git add .
          echo "    Checking for staged changes..."
          if git diff --staged --quiet; then
            echo "    No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
          else
            echo "    Changes detected, committing..."
            git commit -m "Update from template: ${{ inputs.template }}"
            echo "    Pushing to fork remote, branch: ${{ env.branch_name }}"
            git push fork ${{ env.branch_name }}
            echo "    Changes pushed successfully"
            echo "has_changes=true" >> $GITHUB_ENV
          fi
          echo ">>> Completed: Commit and push changes"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.IOBBOT_GITHUB_TOKEN }}
        run: |
          echo ">>> Starting: Create Pull Request"
          
          # Skip PR creation if there are no changes
          if [ "${{ env.has_changes }}" = "false" ]; then
            echo "    Skipping PR creation - no changes were made"
            echo ">>> Completed: Create Pull Request"
            echo "==================================================================="
            echo "Workflow completed successfully (no changes)"
            echo "==================================================================="
            exit 0
          fi
          
          cd target-repo
          # Get the authenticated user for fork reference
          CURRENT_USER=$(gh api user -q .login)
          echo "    Creating PR with:"
          echo "      Title: Update from template: ${{ inputs.template }}"
          echo "      Base: ${{ env.default_branch }}"
          echo "      Head: ${CURRENT_USER}:${{ env.branch_name }}"
          echo "      Repository: ${{ steps.repo_info.outputs.full_name }}"
          
          # Create PR and capture the exit code
          if gh pr create \
            --repo ${{ steps.repo_info.outputs.full_name }} \
            --title "Update from template: ${{ inputs.template }}" \
            --body "This PR applies changes from template: ${{ inputs.template }}" \
            --base ${{ env.default_branch }} \
            --head "${CURRENT_USER}:${{ env.branch_name }}"; then
            echo "    Pull request created successfully"
            echo ">>> Completed: Create Pull Request"
            echo "==================================================================="
            echo "Workflow completed successfully"
            echo "==================================================================="
          else
            echo "    ERROR: Failed to create pull request"
            echo ">>> Failed: Create Pull Request"
            echo "==================================================================="
            echo "Workflow failed"
            echo "==================================================================="
            exit 1
          fi
